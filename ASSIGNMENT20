Question-1\n",
    "\n",
    "Given a binary tree, your task is to find subtree with maximum sum in tree.\n",
    "```\n",
    "Examples:\n",
    "\n",
    "Input1 : Â  Â  Â  \n",
    "\n",
    "       1\n",
    "\n",
    "     / Â  \\\n",
    "\n",
    "   2Â  Â  Â  3\n",
    "\n",
    "  / \\Â  Â  / \\\n",
    "\n",
    "4 Â  5Â  6 Â  7\n",
    "\n",
    "Output1 : 28\n",
    "\n",
    "As all the tree elements are positive, the largest subtree sum is equal to sum of all tree elements.\n",
    "```\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "28\n"
     ]
    }
   ],
   "source": [
    "class TreeNode:\n",
    "    def __init__(self, val=0, left=None, right=None):\n",
    "        self.val = val\n",
    "        self.left = left\n",
    "        self.right = right\n",
    "\n",
    "def maxSubtreeSum(root):\n",
    "    max_sum = float('-inf')\n",
    "\n",
    "    def subtreeSum(node):\n",
    "        nonlocal max_sum\n",
    "\n",
    "        if node is None:\n",
    "            return 0\n",
    "        \n",
    "        left_sum = subtreeSum(node.left)\n",
    "        right_sum = subtreeSum(node.right)\n",
    "\n",
    "        max_sum = max(max_sum, node.val + left_sum + right_sum)\n",
    "\n",
    "        return node.val + left_sum + right_sum\n",
    "\n",
    "    subtreeSum(root)\n",
    "\n",
    "    return max_sum\n",
    "\n",
    "root = TreeNode(1)\n",
    "root.left = TreeNode(2)\n",
    "root.right = TreeNode(3)\n",
    "root.left.left = TreeNode(4)\n",
    "root.left.right = TreeNode(5)\n",
    "root.right.left = TreeNode(6)\n",
    "root.right.right = TreeNode(7)\n",
    "\n",
    "result = maxSubtreeSum(root)\n",
    "print(result)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ Question-2\n",
    "\n",
    "Construct the BST (Binary Search Tree) from its given level order traversal.\n",
    "```\n",
    "Example:\n",
    "\n",
    "Input: arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}\n",
    "\n",
    "Output: BST:\n",
    "\n",
    "            7\n",
    "\n",
    "         /Â  Â  \\\n",
    "\n",
    "       4 Â  Â  12\n",
    "\n",
    "     /Â  \\ Â  Â  /\n",
    "\n",
    "    3 Â  6Â  8\n",
    "\n",
    "   / Â   / Â    \\\n",
    "\n",
    " 1Â    5  Â    10\n",
    " ```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n",
      "4\n",
      "3\n",
      "5\n",
      "10\n",
      "6\n",
      "12\n",
      "8\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "class TreeNode:\n",
    "    def __init__(self, val=0, left=None, right=None):\n",
    "        self.val = val\n",
    "        self.left = left\n",
    "        self.right = right\n",
    "\n",
    "def constructBST(level_order):\n",
    "    if not level_order:\n",
    "        return None\n",
    "\n",
    "    root = TreeNode(level_order[0])\n",
    "    queue = [root]\n",
    "    index = 1\n",
    "\n",
    "    while index < len(level_order):\n",
    "        curr_node = queue.pop(0)\n",
    "        left_val = level_order[index]\n",
    "        right_val = level_order[index + 1] if index + 1 < len(level_order) else None\n",
    "\n",
    "        if left_val is not None:\n",
    "            left_node = TreeNode(left_val)\n",
    "            curr_node.left = left_node\n",
    "            queue.append(left_node)\n",
    "\n",
    "        if right_val is not None:\n",
    "            right_node = TreeNode(right_val)\n",
    "            curr_node.right = right_node\n",
    "            queue.append(right_node)\n",
    "\n",
    "        index += 2\n",
    "\n",
    "    return root\n",
    "\n",
    "level_order = [7, 4, 12, 3, 6, 8, 1, 5, 10]\n",
    "\n",
    "root = constructBST(level_order)\n",
    "\n",
    "def printBST(root):\n",
    "    if root is None:\n",
    "        return\n",
    "\n",
    "    print(root.val)\n",
    "    printBST(root.left)\n",
    "    printBST(root.right)\n",
    "\n",
    "printBST(root)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ Question-3\n",
    "\n",
    "Given an array of size n. The problem is to check whether the given array can represent the level order traversal of a Binary Search Tree or not.\n",
    "```\n",
    "Examples:\n",
    "\n",
    "Input1 : arr[] = {7, 4, 12, 3, 6, 8, 1, 5, 10}\n",
    "\n",
    "Output1 : Yes\n",
    "\n",
    "For the given arr[], the Binary Search Tree is:\n",
    "\n",
    "            7\n",
    "\n",
    "         /Â  Â  \\\n",
    "\n",
    "       4 Â  Â  12\n",
    "\n",
    "     /Â  \\ Â  Â  /\n",
    "\n",
    "    3 Â  6Â  8\n",
    "\n",
    "   / Â   / Â    \\\n",
    "\n",
    " 1Â    5  Â    10\n",
    " ```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "class TreeNode:\n",
    "    def __init__(self, val):\n",
    "        self.val = val\n",
    "        self.left = None\n",
    "        self.right = None\n",
    "\n",
    "\n",
    "def constructBST(arr):\n",
    "    n = len(arr)\n",
    "    if n == 0:\n",
    "        return None\n",
    "\n",
    "    root = TreeNode(arr[0])\n",
    "    i = 1\n",
    "\n",
    "    while i < n:\n",
    "        node = root\n",
    "\n",
    "        while True:\n",
    "            if arr[i] < node.val:\n",
    "                if node.left is None:\n",
    "                    node.left = TreeNode(arr[i])\n",
    "                    break\n",
    "                else:\n",
    "                    node = node.left\n",
    "            elif arr[i] > node.val:\n",
    "                if node.right is None:\n",
    "                    node.right = TreeNode(arr[i])\n",
    "                    break\n",
    "                else:\n",
    "                    node = node.right\n",
    "            else:\n",
    "                return None\n",
    "\n",
    "        i += 1\n",
    "\n",
    "    return root\n",
    "\n",
    "\n",
    "def isLevelOrderBST(arr):\n",
    "    root = constructBST(arr)\n",
    "\n",
    "    if root is None:\n",
    "        return False\n",
    "\n",
    "    def inorderTraversal(node, result):\n",
    "        if node is not None:\n",
    "            inorderTraversal(node.left, result)\n",
    "            result.append(node.val)\n",
    "            inorderTraversal(node.right, result)\n",
    "\n",
    "    inorder = []\n",
    "    inorderTraversal(root, inorder)\n",
    "\n",
    "    return inorder == sorted(arr)\n",
    "\n",
    "\n",
    "\n",
    "arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]\n",
    "\n",
    "result = isLevelOrderBST(arr)\n",
    "print(result)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

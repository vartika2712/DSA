**Question 1**\n",
    "\n",
    "Given two linked list of the same size, the task is to create a new linked list using those linked lists. The condition is that the greater node among both linked list will be added to the new linked list.\n",
    "```\n",
    "**Examples:**\n",
    "Input: list1 = 5->2->3->8\n",
    "list2 = 1->7->4->5\n",
    "Output: New list = 5->7->4->8\n",
    "\n",
    "Input:list1 = 2->8->9->3\n",
    "list2 = 5->3->6->4\n",
    "Output: New list = 5->8->9->4\n",
    "```\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 7 4 8 "
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def append_node(head, newData):\n",
    "    newNode = Node(newData)\n",
    "\n",
    "    if head is None:\n",
    "        head = newNode\n",
    "    else:\n",
    "        temp = head\n",
    "        while temp.next is not None:\n",
    "            temp = temp.next\n",
    "        temp.next = newNode\n",
    "\n",
    "    return head\n",
    "\n",
    "\n",
    "def create_new_linked_list(list1, list2):\n",
    "    new_list = None\n",
    "    temp1 = list1\n",
    "    temp2 = list2\n",
    "\n",
    "    while temp1 is not None and temp2 is not None:\n",
    "        if temp1.data >= temp2.data:\n",
    "            new_list = append_node(new_list, temp1.data)\n",
    "        else:\n",
    "            new_list = append_node(new_list, temp2.data)\n",
    "\n",
    "        temp1 = temp1.next\n",
    "        temp2 = temp2.next\n",
    "\n",
    "    return new_list\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "   \n",
    "    list1 = Node(5)\n",
    "    list1.next = Node(2)\n",
    "    list1.next.next = Node(3)\n",
    "    list1.next.next.next = Node(8)\n",
    "\n",
    "   \n",
    "    list2 = Node(1)\n",
    "    list2.next = Node(7)\n",
    "    list2.next.next = Node(4)\n",
    "    list2.next.next.next = Node(5)\n",
    "\n",
    "    new_list = create_new_linked_list(list1, list2)\n",
    "\n",
    "  \n",
    "    temp = new_list\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 2**\n",
    "\n",
    "Write a function that takes a list sorted in non-decreasing order and deletes any duplicate nodes from the list. The list should only be traversed once.\n",
    "\n",
    "For example if the linked list is 11->11->11->21->43->43->60 then removeDuplicates() should convert the list to 11->21->43->60.\n",
    "\n",
    "**Example 1:**\n",
    "\n",
    "```\n",
    "Input:\n",
    "LinkedList: \n",
    "11->11->11->21->43->43->60\n",
    "Output:\n",
    "11->21->43->60\n",
    "```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 21 43 60 "
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def remove_duplicates(head):\n",
    "    if head is None or head.next is None:\n",
    "        return head\n",
    "\n",
    "    current = head\n",
    "    while current.next is not None:\n",
    "        if current.data == current.next.data:\n",
    "            duplicate = current.next\n",
    "            current.next = current.next.next\n",
    "            del duplicate\n",
    "        else:\n",
    "            current = current.next\n",
    "\n",
    "    return head\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    head = Node(11)\n",
    "    head.next = Node(11)\n",
    "    head.next.next = Node(11)\n",
    "    head.next.next.next = Node(21)\n",
    "    head.next.next.next.next = Node(43)\n",
    "    head.next.next.next.next.next = Node(43)\n",
    "    head.next.next.next.next.next.next = Node(60)\n",
    "\n",
    "   \n",
    "    head = remove_duplicates(head)\n",
    "\n",
    "\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 3**\n",
    "\n",
    "Given a linked list of sizeÂ **N**. The task is to reverse everyÂ **k**Â nodes (where k is an input to the function) in the linked list. If the number of nodes is not a multiple ofÂ *k*Â then left-out nodes, in the end, should be considered as a group and must beÂ reversed (See Example 2 for clarification).\n",
    "\n",
    "**Example 1:**\n",
    "\n",
    "```\n",
    "Input:\n",
    "LinkedList: 1->2->2->4->5->6->7->8\n",
    "K = 4\n",
    "Output:4Â 2Â 2Â 1Â 8Â 7Â 6Â 5\n",
    "Explanation:\n",
    "The first 4 elements 1,2,2,4 are reversed first\n",
    "and then the next 4 elements 5,6,7,8. Hence, the\n",
    "resultant linked list is 4->2->2->1->8->7->6->5.\n",
    "```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4 2 2 1 8 7 6 5 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def reverse_k_nodes(head, k):\n",
    "    if head is None or k <= 1:\n",
    "        return head\n",
    "\n",
    "    prev, curr, next_node = None, head, None\n",
    "    count = 0\n",
    "\n",
    "    while curr is not None and count < k:\n",
    "        next_node = curr.next\n",
    "        curr.next = prev\n",
    "        prev = curr\n",
    "        curr = next_node\n",
    "        count += 1\n",
    "\n",
    "    if next_node is not None:\n",
    "        head.next = reverse_k_nodes(next_node, k)\n",
    "\n",
    "    return prev\n",
    "\n",
    "\n",
    "\n",
    "def print_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "   \n",
    "    head = Node(1)\n",
    "    head.next = Node(2)\n",
    "    head.next.next = Node(2)\n",
    "    head.next.next.next = Node(4)\n",
    "    head.next.next.next.next = Node(5)\n",
    "    head.next.next.next.next.next = Node(6)\n",
    "    head.next.next.next.next.next.next = Node(7)\n",
    "    head.next.next.next.next.next.next.next = Node(8)\n",
    "\n",
    "    \n",
    "    k = 4\n",
    "    head = reverse_k_nodes(head, k)\n",
    "\n",
    "\n",
    "    print_linked_list(head)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 4**\n",
    "\n",
    "Given a linked list, write a function to reverse every alternate k nodes (where k is an input to the function) in an efficient way. Give the complexity of your algorithm.\n",
    "\n",
    "**Example:**\n",
    "\n",
    "```\n",
    "Inputs:   1->2->3->4->5->6->7->8->9->NULL and k = 3\n",
    "Output:   3->2->1->4->5->6->9->8->7->NULL.\n",
    "```\n",
    "\n",
    "</aside>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3 2 1 4 5 6 9 8 7 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def reverse_alternate_k_nodes(head, k):\n",
    "    if head is None or k <= 1:\n",
    "        return head\n",
    "\n",
    "    curr, prev, next_node = head, None, None\n",
    "    count = 0\n",
    "\n",
    "\n",
    "    while curr is not None and count < k:\n",
    "        next_node = curr.next\n",
    "        curr.next = prev\n",
    "        prev = curr\n",
    "        curr = next_node\n",
    "        count += 1\n",
    "\n",
    "    head.next = curr\n",
    "\n",
    "   \n",
    "    count = 0\n",
    "    while curr is not None and count < k - 1:\n",
    "        curr = curr.next\n",
    "        count += 1\n",
    "\n",
    "    if curr is not None:\n",
    "        curr.next = reverse_alternate_k_nodes(curr.next, k)\n",
    "\n",
    "    return prev\n",
    "\n",
    "\n",
    "\n",
    "def print_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    head = Node(1)\n",
    "    head.next = Node(2)\n",
    "    head.next.next = Node(3)\n",
    "    head.next.next.next = Node(4)\n",
    "    head.next.next.next.next = Node(5)\n",
    "    head.next.next.next.next.next = Node(6)\n",
    "    head.next.next.next.next.next.next = Node(7)\n",
    "    head.next.next.next.next.next.next.next = Node(8)\n",
    "    head.next.next.next.next.next.next.next.next = Node(9)\n",
    "\n",
    " \n",
    "    k = 3\n",
    "    head = reverse_alternate_k_nodes(head, k)\n",
    "\n",
    "\n",
    "    print_linked_list(head)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 5**\n",
    "\n",
    "Given a linked list and a key to be deleted. Delete last occurrence of key from linked. The list may have duplicates.\n",
    "\n",
    "**Examples**:\n",
    "\n",
    "```\n",
    "Input:   1->2->3->5->2->10, key = 2\n",
    "Output:  1->2->3->5->10\n",
    "```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Linked List:\n",
      "1 2 3 4 3 5 \n",
      "Updated Linked List:\n",
      "1 2 3 4 5 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def delete_last_occurrence(head, key):\n",
    "    if head is None:\n",
    "        return None\n",
    "\n",
    "    last_occurrence = None\n",
    "    prev, curr = None, head\n",
    "\n",
    "    while curr is not None:\n",
    "        if curr.data == key:\n",
    "            last_occurrence = curr\n",
    "        curr = curr.next\n",
    "\n",
    "\n",
    "    if last_occurrence is None:\n",
    "        return head\n",
    "\n",
    " \n",
    "    if last_occurrence == head:\n",
    "        head = head.next\n",
    "        last_occurrence = None\n",
    "        return head\n",
    "\n",
    "  \n",
    "    prev, curr = None, head\n",
    "    while curr.next is not None:\n",
    "        if curr.next == last_occurrence:\n",
    "            prev = curr\n",
    "        curr = curr.next\n",
    "\n",
    "\n",
    "    prev.next = last_occurrence.next\n",
    "    last_occurrence = None\n",
    "\n",
    "    return head\n",
    "\n",
    "\n",
    "\n",
    "def print_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    head = Node(1)\n",
    "    head.next = Node(2)\n",
    "    head.next.next = Node(3)\n",
    "    head.next.next.next = Node(4)\n",
    "    head.next.next.next.next = Node(3)\n",
    "    head.next.next.next.next.next = Node(5)\n",
    "\n",
    "   \n",
    "    print(\"Original Linked List:\")\n",
    "    print_linked_list(head)\n",
    "\n",
    "\n",
    "    key = 3\n",
    "    head = delete_last_occurrence(head, key)\n",
    "\n",
    "   \n",
    "    print(\"Updated Linked List:\")\n",
    "    print_linked_list(head)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 6**\n",
    "\n",
    "Given two sorted linked lists consisting ofÂ **N**Â andÂ **M**Â nodes respectively. The task is to merge both of the lists (in place) and return the head of the merged list.\n",
    "\n",
    "**Examples:**\n",
    "\n",
    "Input:Â a: 5->10->15,Â b: 2->3->20\n",
    "\n",
    "Output:Â 2->3->5->10->15->20\n",
    "\n",
    "Input:Â a: 1->1, b: 2->4\n",
    "\n",
    "Output:Â 1->1->2->4\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Merged Linked List:\n",
      "2 3 5 10 15 20 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "\n",
    "\n",
    "def merge_sorted_lists(head1, head2):\n",
    "    \n",
    "    dummy = Node()\n",
    "    tail = dummy\n",
    "\n",
    "    while head1 is not None and head2 is not None:\n",
    "        if head1.data <= head2.data:\n",
    "            tail.next = head1\n",
    "            head1 = head1.next\n",
    "        else:\n",
    "            tail.next = head2\n",
    "            head2 = head2.next\n",
    "        tail = tail.next\n",
    "\n",
    "  \n",
    "    if head1 is not None:\n",
    "        tail.next = head1\n",
    "    elif head2 is not None:\n",
    "        tail.next = head2\n",
    "\n",
    "    \n",
    "    return dummy.next\n",
    "\n",
    "\n",
    "\n",
    "def print_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    head1 = Node(5)\n",
    "    head1.next = Node(10)\n",
    "    head1.next.next = Node(15)\n",
    "\n",
    "\n",
    "    head2 = Node(2)\n",
    "    head2.next = Node(3)\n",
    "    head2.next.next = Node(20)\n",
    "\n",
    " \n",
    "    merged_head = merge_sorted_lists(head1, head2)\n",
    "\n",
    "\n",
    "    print(\"Merged Linked List:\")\n",
    "    print_linked_list(merged_head)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 7**\n",
    "\n",
    "Given aÂ **Doubly Linked List**, the task is to reverse the given Doubly Linked List.\n",
    "\n",
    "**Example:**\n",
    "\n",
    "```\n",
    "Original Linked list 10 8 4 2\n",
    "Reversed Linked list 2 4 8 10\n",
    "```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Doubly Linked List:\n",
      "10 8 4 2 \n",
      "Reversed Doubly Linked List:\n",
      "2 4 8 10 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "        self.prev = None\n",
    "\n",
    "\n",
    "def reverse_doubly_linked_list(head):\n",
    "    if head is None or head.next is None:\n",
    "        return head\n",
    "\n",
    "    current = head\n",
    "    prev = None\n",
    "\n",
    "    while current is not None:\n",
    "        next_node = current.next\n",
    "        current.next = prev\n",
    "        current.prev = next_node\n",
    "        prev = current\n",
    "        current = next_node\n",
    "\n",
    "    head = prev\n",
    "    return head\n",
    "\n",
    "\n",
    "\n",
    "def print_doubly_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "   \n",
    "    head = Node(10)\n",
    "    head.next = Node(8)\n",
    "    head.next.prev = head\n",
    "    head.next.next = Node(4)\n",
    "    head.next.next.prev = head.next\n",
    "    head.next.next.next = Node(2)\n",
    "    head.next.next.next.prev = head.next.next\n",
    "\n",
    "\n",
    "    print(\"Original Doubly Linked List:\")\n",
    "    print_doubly_linked_list(head)\n",
    "\n",
    "    \n",
    "    head = reverse_doubly_linked_list(head)\n",
    "\n",
    "\n",
    "    print(\"Reversed Doubly Linked List:\")\n",
    "    print_doubly_linked_list(head)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<aside>\n",
    "ðŸ’¡ **Question 8**\n",
    "\n",
    "Given a doubly linked list and a position. The task is to delete a node from given position inÂ a doubly linked list.\n",
    "\n",
    "**Example 1:**\n",
    "\n",
    "```\n",
    "Input:\n",
    "LinkedList = 1 <--> 3 <--> 4\n",
    "x = 3\n",
    "Output:1 3\n",
    "Explanation:After deleting the node at\n",
    "position 3 (position starts from 1),\n",
    "the linked list will be now as 1->3.\n",
    "\n",
    "```\n",
    "\n",
    "</aside>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Doubly Linked List:\n",
      "1 5 2 9 \n",
      "Updated Doubly Linked List:\n",
      "5 2 9 \n"
     ]
    }
   ],
   "source": [
    "class Node:\n",
    "    def __init__(self, data=None):\n",
    "        self.data = data\n",
    "        self.next = None\n",
    "        self.prev = None\n",
    "\n",
    "\n",
    "def delete_node_at_position(head, position):\n",
    "    if head is None:\n",
    "        return None\n",
    "\n",
    "    if position == 1:\n",
    "        new_head = head.next\n",
    "        if new_head is not None:\n",
    "            new_head.prev = None\n",
    "        return new_head\n",
    "\n",
    "    current = head\n",
    "    prev = None\n",
    "    count = 1\n",
    "\n",
    "    while current is not None and count < position:\n",
    "        prev = current\n",
    "        current = current.next\n",
    "        count += 1\n",
    "\n",
    "    if current is None:\n",
    "        return head\n",
    "\n",
    "    prev.next = current.next\n",
    "    if current.next is not None:\n",
    "        current.next.prev = prev\n",
    "    current.next = None\n",
    "    current.prev = None\n",
    "\n",
    "    return head\n",
    "\n",
    "\n",
    "def print_doubly_linked_list(head):\n",
    "    temp = head\n",
    "    while temp is not None:\n",
    "        print(temp.data, end=\" \")\n",
    "        temp = temp.next\n",
    "    print()\n",
    "\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "   \n",
    "    head = Node(1)\n",
    "    head.next = Node(5)\n",
    "    head.next.prev = head\n",
    "    head.next.next = Node(2)\n",
    "    head.next.next.prev = head.next\n",
    "    head.next.next.next = Node(9)\n",
    "    head.next.next.prev = head.next.next\n",
    "\n",
    "    \n",
    "    print(\"Original Doubly Linked List:\")\n",
    "    print_doubly_linked_list(head)\n",
    "\n",
    " \n",
    "    position = 1\n",
    "    head = delete_node_at_position(head, position)\n",
    "\n",
    "\n",
    "    print(\"Updated Doubly Linked List:\")\n",
    "    print_doubly_linked_list(head)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
